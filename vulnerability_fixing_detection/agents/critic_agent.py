"""
Security Critic Agent for the Vulnerability Fixing Detection Pipeline.

This agent scrutinizes the Auditor Agent's output and provides critical review
of the vulnerability fix analysis, checking for completeness and accuracy.
"""

import json
import re
from typing import Dict, Any, List

from api.base_client import BaseAPIClient
from utils.logging_utils import LoggerMixin


class CriticAgent(LoggerMixin):
    """
    Agent responsible for reviewing and critiquing the Auditor Agent's analysis.

    This agent evaluates the Auditor's reasoning, identifies missing considerations,
    and suggests corrections or improvements to the vulnerability fix assessment.
    """

    def __init__(self, api_client: BaseAPIClient):
        """
        Initialize the Critic Agent.

        Args:
            api_client: API client for making model calls
        """
        self.api_client = api_client

    def review_auditor_analysis(
            self,
            code_diff: str,
            commit_message: str,
            cwe_info: str,
            auditor_output: Dict[str, Any]
    ) -> Dict[str, Any]:
        """
        Review the Auditor Agent's analysis and provide critical feedback.

        Args:
            code_diff: The code diff showing changes
            commit_message: Commit message providing context
            cwe_info: CWE information about the vulnerability
            auditor_output: Analysis results from the Auditor Agent

        Returns:
            Dictionary containing review results and suggestions
        """
        # Create the prompt messages
        messages = self._create_prompt_messages(
            code_diff, commit_message, cwe_info, auditor_output
        )

        # Make the API call
        response = self.api_client.call_model(messages, "Security Critic")

        # Parse and validate the response
        review_result = self._parse_response(response)

        return review_result

    def _create_prompt_messages(
            self,
            code_diff: str,
            commit_message: str,
            cwe_info: str,
            auditor_output: Dict[str, Any]
    ) -> List[Dict[str, str]]:
        """
        Create the prompt messages for the API call.

        Args:
            code_diff: The code diff showing changes
            commit_message: Commit message providing context
            cwe_info: CWE information about the vulnerability
            auditor_output: Analysis results from the Auditor Agent

        Returns:
            List of messages for the API call
        """
        system_prompt = """You are a meticulous security reviewer. Your role is to scrutinize the Auditor Agent's output and check it against the actual code changes, commit message, and any CWE information.

* Evaluate whether the Auditor's reasoning is correct, complete, and well-supported by code evidence.
* Try to find any missing considerations, overlooked edge cases, or potential misinterpretations.
* Suggest corrections or alternative conclusions if necessary.
* When evaluating "is_vuln_fix", focus on whether there's evidence of security-related code changes, not the quality of the fix.

Your task:

1. Evaluate if the Auditor's conclusion and reasoning are fully justified by the code evidence.
2. Identify any missing, weak, or incorrect reasoning or evidence.
3. List any aspects the Auditor may have overlooked.
4. If you disagree, suggest a corrected or improved version of the structured output.

**Respond in this exact JSON structure:**

{
  "agrees_with_auditor": true/false,
  "reason_for_agreement_or_disagreement": "...",
  "missing_considerations": [
    "..."
  ],
  "suggested_revision": {
    "is_vuln_fix": true/false,
    "vulnerability_type": "...",
    "reason": "...",
    "code_evidence": [
      {
        "changed_lines": "...",
        "snippet": "..."
      }
    ]
  }
}

*If you agree and have no suggested revision, set `suggested_revision` to null.*"""

        user_prompt = f"""You are given the original code diff, commit message, CWE info, and the Auditor Agent's analysis. Please review the Auditor's work thoroughly.

**Original code diff:**
{code_diff}

**Auditor Agent's analysis:**
{json.dumps(auditor_output, indent=2)}

**CWE info:**
{cwe_info}

**Commit message:**
{commit_message}

Provide your review following the JSON structure specified in the system prompt."""

        return [
            {"role": "system", "content": system_prompt},
            {"role": "user", "content": user_prompt}
        ]

    def _parse_response(self, response: str) -> Dict[str, Any]:
        """
        Parse the API response and extract JSON data.

        Args:
            response: Raw response from the API

        Returns:
            Parsed JSON data as dictionary
        """
        try:
            # Try to parse as direct JSON first
            review_data = json.loads(response)
            return review_data
        except json.JSONDecodeError:
            # Try to extract JSON from code blocks
            json_match = re.search(r'```json\n(.*?)\n```', response, re.DOTALL)
            if json_match:
                try:
                    review_data = json.loads(json_match.group(1))
                    return review_data
                except json.JSONDecodeError:
                    pass

            # Try to find JSON in curly braces
            json_match = re.search(r'\{.*\}', response, re.DOTALL)
            if json_match:
                try:
                    review_data = json.loads(json_match.group(0))
                    return review_data
                except json.JSONDecodeError:
                    pass

            # If all parsing attempts fail, return default response
            self.logger.error("Could not parse JSON from Critic response. Raw response:")
            self.logger.error(response)

            # Return a default response if parsing fails
            review_data = {
                "agrees_with_auditor": False,
                "reason_for_agreement_or_disagreement": "Failed to parse response",
                "missing_considerations": ["Parse error occurred"],
                "suggested_revision": None,
                "parse_error": "Could not parse JSON response from Critic"
            }

            return review_data

    def extract_json_from_response(self, content: str) -> Dict[str, Any]:
        """
        Extract JSON from markdown code blocks or plain text.

        Args:
            content: Raw content from API response

        Returns:
            Parsed JSON data or raw response if parsing fails
        """
        # Try to extract JSON from markdown code blocks
        json_match = re.search(r'```(?:json)?\s*\n?(.*?)\n?```', content, re.DOTALL)
        if json_match:
            json_str = json_match.group(1).strip()
            try:
                return json.loads(json_str)
            except json.JSONDecodeError:
                pass

        # Try to parse the entire content as JSON
        try:
            return json.loads(content)
        except json.JSONDecodeError:
            pass

        # If all fails, return as raw response
        return {"raw_response": content}
